#!/usr/bin/python

import socket
import fileinput
import json

JQ = 0
DJ = 1

clType = JQ

delimiter = '%7C' ### |
#delimiter = '%2C' ### ,

HOST, PORT = '', 8888

listen_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM, socket.IPPROTO_TCP)
listen_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
listen_socket.bind((HOST, PORT))
listen_socket.listen(1)

print 'Importing names...'


names = {}

for l in fileinput.input("names.data"):
	sl = l.split(" ");
	k = sl[0].rstrip()
	if  k in names:
		names[k] += '|' + l.rstrip()
	else:
		names[k] = l.rstrip()

print "Done. Imported " + str(len(names)) + " names."

print 'Serving HTTP on port %s ...' % PORT

while True:
	client_connection, client_address = listen_socket.accept()
	request = client_connection.recv(2048)
	print request
	req = request.split(" ")
	req_string = req[1].split("/")[1]
	print "req_string: ",req_string

	if clType == JQ:
		f_search_string = req_string.split("=")[1]
	if clType == DJ:
		f_search_string = req_string
	
	sf_search_string = f_search_string.split(delimiter)
	
	print 'sf_search_string: ',sf_search_string
	
	if len(sf_search_string)>1:
		search_string = sf_search_string[len(sf_search_string)-1].strip()
	else:
		search_string = f_search_string.strip()
	
	print "Search string: " + search_string
	

	fnamesl = []
	
	if len(search_string) > 0:
		for key, value in names.items():
			if search_string in key:
				fnamesl.append(value)
		
		print len(fnamesl)
	fnames = []
	for vals in fnamesl:
		for sub_val in vals.split("|"):
			fnames.append('{"label":"%s", "value":"%s"}'%(sub_val,sub_val))
	print 'fnames: ',fnames
	ret = ','.join(fnames)
	print "json: ",ret
	lret = len(ret) + 2;

	rehead_proto = 'HTTP/1.1'
	rehead_status = '200'
	rehead_status_text = 'OK'
	if clType == JQ:
		rehead_content_type = 'Content-Type: text/javascript; charset=UTF-8'
	if clType == DJ:
		rehead_content_type = 'Content-Type: text/json; charset=UTF-8'
	rehead_content_length = str(lret)
	rehead_control = 'Access-Control-Allow-Origin: *'
	rehead_close = 'Connection: close'

	body = '[%s]'%(ret)

	client_connection.send('%s\n%s\n%s\n%s\n%s\n%s\n%s\n'%(rehead_proto,rehead_status,rehead_status_text,rehead_content_type,rehead_content_length,rehead_control,rehead_close))
	client_connection.send('\n')
	client_connection.send(body)
	client_connection.send('\n')
	client_connection.close()